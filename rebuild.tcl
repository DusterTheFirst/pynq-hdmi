#*****************************************************************************************
# Vivado (TM) v2022.1 (64-bit)
#
# rebuild.tcl: Tcl script for re-creating project 'project'
#
# Generated by Vivado on Thu May 04 10:19:06 UTC 2023
# IP Build 3524634 on Mon Apr 18 20:55:01 MDT 2022
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (rebuild.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/simple_480p.v"
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/byte_to_tmds.v"
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/10bit_par_to_ser.v"
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/diff_buf.v"
#    "/home/dusterthefirst/github/pynq-hdmi/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.v"
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/hdmi_tmds.v"
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/hdmi.v"
#    "/home/dusterthefirst/github/pynq-hdmi/cons/pynq-z2-1.0.xdc"
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/sim/TMDS_Encoder.ref.vhd"
#    "/home/dusterthefirst/github/pynq-hdmi/rtl/sim/tmds_encode_tb.v"
#    "/home/dusterthefirst/github/pynq-hdmi/tmds_encode_tb_behav.wcfg"
#    "/home/dusterthefirst/github/pynq-hdmi/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.dcp"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/rtl/simple_480p.v"]"\
 "[file normalize "$origin_dir/rtl/byte_to_tmds.v"]"\
 "[file normalize "$origin_dir/rtl/10bit_par_to_ser.v"]"\
 "[file normalize "$origin_dir/rtl/diff_buf.v"]"\
 "[file normalize "$origin_dir/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.v"]"\
 "[file normalize "$origin_dir/rtl/hdmi_tmds.v"]"\
 "[file normalize "$origin_dir/rtl/hdmi.v"]"\
 "[file normalize "$origin_dir/cons/pynq-z2-1.0.xdc"]"\
 "[file normalize "$origin_dir/rtl/sim/TMDS_Encoder.ref.vhd"]"\
 "[file normalize "$origin_dir/rtl/sim/tmds_encode_tb.v"]"\
 "[file normalize "$origin_dir/tmds_encode_tb_behav.wcfg"]"\
 "[file normalize "$origin_dir/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.dcp"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "project"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "rebuild.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/project"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7z020clg400-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "tul.com.tw:pynq-z2:part0:1.0" -objects $obj
set_property -name "customized_default_ip_location" -value "/" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "pynq-z2" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "1" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "1" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "1" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "1" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "1" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "1" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "1" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "2" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/rtl/simple_480p.v"] \
 [file normalize "${origin_dir}/rtl/byte_to_tmds.v"] \
 [file normalize "${origin_dir}/rtl/10bit_par_to_ser.v"] \
 [file normalize "${origin_dir}/rtl/diff_buf.v"] \
 [file normalize "${origin_dir}/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.v"] \
 [file normalize "${origin_dir}/rtl/hdmi_tmds.v"] \
 [file normalize "${origin_dir}/rtl/hdmi.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "hdmi_pipeline_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/cons/pynq-z2-1.0.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/cons/pynq-z2-1.0.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/rtl/sim/TMDS_Encoder.ref.vhd"] \
 [file normalize "${origin_dir}/rtl/sim/tmds_encode_tb.v"] \
 [file normalize "${origin_dir}/tmds_encode_tb_behav.wcfg"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/rtl/sim/TMDS_Encoder.ref.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "tmds_encode_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
set files [list \
 [file normalize "${origin_dir}/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.dcp"] \
]
add_files -norecurse -fileset $obj $files

# Set 'utils_1' fileset file properties for remote files
set file "$origin_dir/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.dcp"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets utils_1] [list "*$file"]]
set_property -name "netlist_only" -value "0" -objects $file_obj


# Set 'utils_1' fileset file properties for local files
# None

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files simple_480p.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/simple_480p.v
}
if { [get_files byte_to_tmds.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/byte_to_tmds.v
}
if { [get_files byte_to_tmds.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/byte_to_tmds.v
}
if { [get_files byte_to_tmds.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/byte_to_tmds.v
}
if { [get_files 10bit_par_to_ser.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/10bit_par_to_ser.v
}
if { [get_files 10bit_par_to_ser.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/10bit_par_to_ser.v
}
if { [get_files 10bit_par_to_ser.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/10bit_par_to_ser.v
}
if { [get_files diff_buf.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/diff_buf.v
}
if { [get_files diff_buf.v] == "" } {
  import_files -quiet -fileset sources_1 /home/dusterthefirst/github/pynq-hdmi/rtl/diff_buf.v
}


# Proc to create BD hdmi_pipeline
proc cr_bd_hdmi_pipeline { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# byte_to_tmds, tenbit_par_to_ser, diff_buf, diff_buf, byte_to_tmds, tenbit_par_to_ser, byte_to_tmds, tenbit_par_to_ser, simple_480p



  # CHANGE DESIGN NAME HERE
  set design_name hdmi_pipeline

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xlconcat:2.1\
  xilinx.com:ip:clk_wiz:6.0\
  xilinx.com:ip:xlconstant:1.1\
  xilinx.com:ip:xlslice:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  byte_to_tmds\
  tenbit_par_to_ser\
  diff_buf\
  diff_buf\
  byte_to_tmds\
  tenbit_par_to_ser\
  byte_to_tmds\
  tenbit_par_to_ser\
  simple_480p\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set btn [ create_bd_port -dir I -from 3 -to 0 btn ]
  set hdmi_tx_clk_n [ create_bd_port -dir O -from 0 -to 0 hdmi_tx_clk_n ]
  set hdmi_tx_clk_p [ create_bd_port -dir O -from 0 -to 0 hdmi_tx_clk_p ]
  set hdmi_tx_data_n [ create_bd_port -dir O -from 2 -to 0 hdmi_tx_data_n ]
  set hdmi_tx_data_p [ create_bd_port -dir O -from 2 -to 0 hdmi_tx_data_p ]
  set hdmi_tx_hpdn [ create_bd_port -dir I -from 0 -to 0 hdmi_tx_hpdn ]
  set led [ create_bd_port -dir O -from 3 -to 0 led ]
  set sw [ create_bd_port -dir I -from 1 -to 0 sw ]
  set sysclk [ create_bd_port -dir I -type clk sysclk ]

  # Create instance: blue_byte, and set properties
  set blue_byte [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 blue_byte ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {5} \
   CONFIG.IN1_WIDTH {2} \
   CONFIG.IN2_WIDTH {1} \
   CONFIG.IN3_WIDTH {5} \
   CONFIG.NUM_PORTS {3} \
 ] $blue_byte

  # Create instance: blue_encoder, and set properties
  set block_name byte_to_tmds
  set block_cell_name blue_encoder
  if { [catch {set blue_encoder [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $blue_encoder eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: blue_serializer, and set properties
  set block_name tenbit_par_to_ser
  set block_cell_name blue_serializer
  if { [catch {set blue_serializer [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $blue_serializer eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: clk_diff_buf, and set properties
  set block_name diff_buf
  set block_cell_name clk_diff_buf
  if { [catch {set clk_diff_buf [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $clk_diff_buf eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.WIDTH {1} \
 ] $clk_diff_buf

  # Create instance: clock, and set properties
  set clock [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clock ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {80.0} \
   CONFIG.CLKOUT1_JITTER {193.240} \
   CONFIG.CLKOUT1_PHASE_ERROR {116.462} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {25.200} \
   CONFIG.CLKOUT2_JITTER {120.602} \
   CONFIG.CLKOUT2_PHASE_ERROR {116.462} \
   CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {252.000} \
   CONFIG.CLKOUT2_USED {true} \
   CONFIG.CLK_IN1_BOARD_INTERFACE {sys_clock} \
   CONFIG.CLK_OUT1_PORT {pixel_clock} \
   CONFIG.CLK_OUT2_PORT {tmds_clock} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {16.125} \
   CONFIG.MMCM_CLKIN1_PERIOD {8.000} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {40.000} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {4} \
   CONFIG.MMCM_DIVCLK_DIVIDE {2} \
   CONFIG.NUM_OUT_CLKS {2} \
 ] $clock

  # Create instance: color_low_bits, and set properties
  set color_low_bits [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 color_low_bits ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $color_low_bits

  # Create instance: data_diff_buf, and set properties
  set block_name diff_buf
  set block_cell_name data_diff_buf
  if { [catch {set data_diff_buf [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_diff_buf eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: green_byte, and set properties
  set green_byte [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 green_byte ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {5} \
   CONFIG.IN1_WIDTH {2} \
   CONFIG.IN2_WIDTH {1} \
   CONFIG.IN3_WIDTH {5} \
   CONFIG.NUM_PORTS {3} \
 ] $green_byte

  # Create instance: green_encoder, and set properties
  set block_name byte_to_tmds
  set block_cell_name green_encoder
  if { [catch {set green_encoder [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $green_encoder eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: green_serializer, and set properties
  set block_name tenbit_par_to_ser
  set block_cell_name green_serializer
  if { [catch {set green_serializer [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $green_serializer eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: red_byte, and set properties
  set red_byte [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 red_byte ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {5} \
   CONFIG.IN1_WIDTH {2} \
   CONFIG.IN2_WIDTH {1} \
   CONFIG.IN3_WIDTH {5} \
   CONFIG.NUM_PORTS {3} \
 ] $red_byte

  # Create instance: red_encoder, and set properties
  set block_name byte_to_tmds
  set block_cell_name red_encoder
  if { [catch {set red_encoder [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $red_encoder eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: red_high_bit, and set properties
  set red_high_bit [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 red_high_bit ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {4} \
 ] $red_high_bit

  # Create instance: red_high_bit1, and set properties
  set red_high_bit1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 red_high_bit1 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {4} \
 ] $red_high_bit1

  # Create instance: red_high_bit2, and set properties
  set red_high_bit2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 red_high_bit2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {4} \
 ] $red_high_bit2

  # Create instance: red_serializer, and set properties
  set block_name tenbit_par_to_ser
  set block_cell_name red_serializer
  if { [catch {set red_serializer [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $red_serializer eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: serial_join, and set properties
  set serial_join [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 serial_join ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {3} \
 ] $serial_join

  # Create instance: timing_generator, and set properties
  set block_name simple_480p
  set block_cell_name timing_generator
  if { [catch {set timing_generator [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $timing_generator eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: video_control_zero, and set properties
  set video_control_zero [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 video_control_zero ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $video_control_zero

  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 xlconcat_0 ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {4} \
 ] $xlconcat_0

  # Create instance: zero, and set properties
  set zero [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 zero ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $zero

  # Create port connections
  connect_bd_net -net Din_0_1 [get_bd_ports btn] [get_bd_pins red_high_bit/Din] [get_bd_pins red_high_bit1/Din] [get_bd_pins red_high_bit2/Din]
  connect_bd_net -net In1_0_1 [get_bd_ports sw] [get_bd_pins blue_byte/In1] [get_bd_pins green_byte/In1] [get_bd_pins red_byte/In1]
  connect_bd_net -net In3_0_1 [get_bd_ports hdmi_tx_hpdn] [get_bd_pins xlconcat_0/In3]
  connect_bd_net -net blue_byte_dout [get_bd_pins blue_byte/dout] [get_bd_pins blue_encoder/input_byte]
  connect_bd_net -net blue_encoder_output_tmds [get_bd_pins blue_encoder/output_tmds] [get_bd_pins blue_serializer/parallel]
  connect_bd_net -net blue_serializer_serial [get_bd_pins blue_serializer/serial] [get_bd_pins serial_join/In0] [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net clk_in1_0_1 [get_bd_ports sysclk] [get_bd_pins clock/clk_in1]
  connect_bd_net -net clock_pixel_clock [get_bd_pins blue_encoder/pixel_clock] [get_bd_pins blue_serializer/parallel_load] [get_bd_pins clk_diff_buf/I] [get_bd_pins clock/pixel_clock] [get_bd_pins green_encoder/pixel_clock] [get_bd_pins green_serializer/parallel_load] [get_bd_pins red_encoder/pixel_clock] [get_bd_pins red_serializer/parallel_load] [get_bd_pins timing_generator/clk_pix]
  connect_bd_net -net clock_tmds_clock [get_bd_pins blue_serializer/serial_clock] [get_bd_pins clock/tmds_clock] [get_bd_pins green_serializer/serial_clock] [get_bd_pins red_serializer/serial_clock]
  connect_bd_net -net color_low_bits_dout [get_bd_pins blue_byte/In0] [get_bd_pins color_low_bits/dout] [get_bd_pins green_byte/In0] [get_bd_pins red_byte/In0]
  connect_bd_net -net data_diff_buf_O [get_bd_ports hdmi_tx_data_p] [get_bd_pins data_diff_buf/O]
  connect_bd_net -net data_diff_buf_OB [get_bd_ports hdmi_tx_data_n] [get_bd_pins data_diff_buf/OB]
  connect_bd_net -net diff_buf_0_O [get_bd_ports hdmi_tx_clk_p] [get_bd_pins clk_diff_buf/O]
  connect_bd_net -net diff_buf_0_OB [get_bd_ports hdmi_tx_clk_n] [get_bd_pins clk_diff_buf/OB]
  connect_bd_net -net green_byte_dout [get_bd_pins green_byte/dout] [get_bd_pins green_encoder/input_byte]
  connect_bd_net -net green_encoder_output_tmds [get_bd_pins green_encoder/output_tmds] [get_bd_pins green_serializer/parallel]
  connect_bd_net -net green_serializer_serial [get_bd_pins green_serializer/serial] [get_bd_pins serial_join/In1] [get_bd_pins xlconcat_0/In1]
  connect_bd_net -net red_byte_dout [get_bd_pins red_byte/dout] [get_bd_pins red_encoder/input_byte]
  connect_bd_net -net red_encoder_output_tmds [get_bd_pins red_encoder/output_tmds] [get_bd_pins red_serializer/parallel]
  connect_bd_net -net red_high_bit1_Dout [get_bd_pins green_byte/In2] [get_bd_pins red_high_bit1/Dout]
  connect_bd_net -net red_high_bit2_Dout [get_bd_pins blue_byte/In2] [get_bd_pins red_high_bit2/Dout]
  connect_bd_net -net red_high_bit_Dout [get_bd_pins red_byte/In2] [get_bd_pins red_high_bit/Dout]
  connect_bd_net -net red_serializer_serial [get_bd_pins red_serializer/serial] [get_bd_pins serial_join/In2] [get_bd_pins xlconcat_0/In2]
  connect_bd_net -net serial_join_dout [get_bd_pins data_diff_buf/I] [get_bd_pins serial_join/dout]
  connect_bd_net -net timing_generator_data_enable [get_bd_pins blue_encoder/video_data_enable] [get_bd_pins green_encoder/video_data_enable] [get_bd_pins red_encoder/video_data_enable] [get_bd_pins timing_generator/data_enable]
  connect_bd_net -net timing_generator_hsync [get_bd_pins blue_encoder/c0] [get_bd_pins timing_generator/hsync]
  connect_bd_net -net timing_generator_vsync [get_bd_pins blue_encoder/c1] [get_bd_pins timing_generator/vsync]
  connect_bd_net -net video_control_zero_dout [get_bd_pins green_encoder/c0] [get_bd_pins green_encoder/c1] [get_bd_pins red_encoder/c0] [get_bd_pins red_encoder/c1] [get_bd_pins video_control_zero/dout]
  connect_bd_net -net xlconcat_0_dout [get_bd_ports led] [get_bd_pins xlconcat_0/dout]
  connect_bd_net -net zero_dout [get_bd_pins clock/reset] [get_bd_pins timing_generator/rst_pix] [get_bd_pins zero/dout]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_hdmi_pipeline()
cr_bd_hdmi_pipeline ""
set_property REGISTERED_WITH_MANAGER "1" [get_files hdmi_pipeline.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files hdmi_pipeline.bd ] 

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z020clg400-1 -flow {Vivado Synthesis 2022} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2022" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "incremental_checkpoint" -value "/home/dusterthefirst/github/pynq-hdmi/ip/hdmi_pipeline/hdl/hdmi_pipeline_wrapper.dcp" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z020clg400-1 -flow {Vivado Implementation 2022} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2022" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
